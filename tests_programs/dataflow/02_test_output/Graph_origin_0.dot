digraph G {
  ranksep=.25;
  edge [arrowsize=.5]
  node [shape=rectangle, fontname="ArialNarrow",
        fontsize=12,  height=1.2];
  "           Main :  EMPTY_STATEMENT
"; "           Init :  EMPTY_STATEMENT
             L0 :  max = 0
             L1 :  count = 0
             L2 :  OUT_1 = false
"; "           Body :  EMPTY_STATEMENT
             L5 :  #_t0 = 1
             L6 :  count = #_t0
"; "    FOR_COND_L3 :  EMPTY_STATEMENT
             L7 :  #_t1 = 5
             L8 :  #_t2 = count < #_t1
             L9 :  if #_t2 goto FOR_L4
"; "            L10 :  goto END_FOR_L4
"; "         FOR_L4 :  EMPTY_STATEMENT
            L11 :  max = lst[max] 
            L12 :  count = count + 1
            L13 :  goto FOR_COND_L3
"; "     END_FOR_L4 :  EMPTY_STATEMENT
            L14 :  #_t3 = 0
            L15 :  max = #_t3
            L16 :  #_t5 = 2
            L17 :  #_t6 = 100
            L18 :  #_t4 = add(#_t5,#_t6,)
            L19 :  max = #_t4
            L20 :  return 
"; "          Entry :  EMPTY_STATEMENT
"; "            End :  EMPTY_STATEMENT
            L21 :  print(OUT_1,)
"; "           Exit :  EMPTY_STATEMENT
"; "           Read :  EMPTY_STATEMENT
            L22 :  max = read()
            L23 :  count = read()
"; 
  "           Main :  EMPTY_STATEMENT
" -> "           Init :  EMPTY_STATEMENT
             L0 :  max = 0
             L1 :  count = 0
             L2 :  OUT_1 = false
"  [label="default"];
  "           Init :  EMPTY_STATEMENT
             L0 :  max = 0
             L1 :  count = 0
             L2 :  OUT_1 = false
" -> "           Body :  EMPTY_STATEMENT
             L5 :  #_t0 = 1
             L6 :  count = #_t0
"  [label="default"];
  "           Body :  EMPTY_STATEMENT
             L5 :  #_t0 = 1
             L6 :  count = #_t0
" -> "    FOR_COND_L3 :  EMPTY_STATEMENT
             L7 :  #_t1 = 5
             L8 :  #_t2 = count < #_t1
             L9 :  if #_t2 goto FOR_L4
"  [label="default"];
  "    FOR_COND_L3 :  EMPTY_STATEMENT
             L7 :  #_t1 = 5
             L8 :  #_t2 = count < #_t1
             L9 :  if #_t2 goto FOR_L4
" -> "            L10 :  goto END_FOR_L4
"  [label="default"];
  "    FOR_COND_L3 :  EMPTY_STATEMENT
             L7 :  #_t1 = 5
             L8 :  #_t2 = count < #_t1
             L9 :  if #_t2 goto FOR_L4
" -> "         FOR_L4 :  EMPTY_STATEMENT
            L11 :  max = lst[max] 
            L12 :  count = count + 1
            L13 :  goto FOR_COND_L3
"  [label="alter"];
  "            L10 :  goto END_FOR_L4
" -> "     END_FOR_L4 :  EMPTY_STATEMENT
            L14 :  #_t3 = 0
            L15 :  max = #_t3
            L16 :  #_t5 = 2
            L17 :  #_t6 = 100
            L18 :  #_t4 = add(#_t5,#_t6,)
            L19 :  max = #_t4
            L20 :  return 
"  [label="alter"];
  "         FOR_L4 :  EMPTY_STATEMENT
            L11 :  max = lst[max] 
            L12 :  count = count + 1
            L13 :  goto FOR_COND_L3
" -> "    FOR_COND_L3 :  EMPTY_STATEMENT
             L7 :  #_t1 = 5
             L8 :  #_t2 = count < #_t1
             L9 :  if #_t2 goto FOR_L4
"  [label="alter"];
  "     END_FOR_L4 :  EMPTY_STATEMENT
            L14 :  #_t3 = 0
            L15 :  max = #_t3
            L16 :  #_t5 = 2
            L17 :  #_t6 = 100
            L18 :  #_t4 = add(#_t5,#_t6,)
            L19 :  max = #_t4
            L20 :  return 
" -> "            End :  EMPTY_STATEMENT
            L21 :  print(OUT_1,)
"  [label="default"];
  "          Entry :  EMPTY_STATEMENT
" -> "           Main :  EMPTY_STATEMENT
"  [label="default"];
  "            End :  EMPTY_STATEMENT
            L21 :  print(OUT_1,)
" -> "           Read :  EMPTY_STATEMENT
            L22 :  max = read()
            L23 :  count = read()
"  [label="default"];
  "            End :  EMPTY_STATEMENT
            L21 :  print(OUT_1,)
" -> "           Exit :  EMPTY_STATEMENT
"  [label="alter"];
  "           Read :  EMPTY_STATEMENT
            L22 :  max = read()
            L23 :  count = read()
" -> "           Body :  EMPTY_STATEMENT
             L5 :  #_t0 = 1
             L6 :  count = #_t0
"  [label="default"];
}
